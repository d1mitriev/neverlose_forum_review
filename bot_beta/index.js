require('dotenv').config();
const { 
    Client, 
    GatewayIntentBits, 
    EmbedBuilder,
    REST,
    Routes,
    SlashCommandBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle
} = require('discord.js');
const puppeteer = require('puppeteer');
const fs = require('fs');

const config = {
    discordToken: process.env.DISCORD_TOKEN,
    channelId: process.env.CHANNEL_ID,
    forumUrl: 'https://forum.neverlose.cc/t/24-7-unique-resell-ua-ru-kz-ua-cards-ru-cards-kz-cards-binance-pay-bybit-uid-htx-id/519874',
    checkInterval: 5 * 60 * 1000,     dataFile: './lastChecked.json'
};

const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

let lastCheckedData = {
    lastPostId: 0,
    lastPostNumber: 0
};

const commands = [
    new SlashCommandBuilder()
        .setName('check')
        .setDescription('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('lastreview')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ä—É–º–∞')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('verify')
        .setDescription('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        .addStringOption(option => 
            option.setName('url')
                .setDescription('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('username')
                .setDescription('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–æ—Ä—É–º–µ')
                .setRequired(true))
        .toJSON(),
    new SlashCommandBuilder()
        .setName('checkcomment')
        .setDescription('–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('collect')
        .setDescription('–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ç–µ–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à')
        .toJSON()
];

async function registerCommands() {
    try {
        const rest = new REST({ version: '10' }).setToken(config.discordToken);
        
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é slash-–∫–æ–º–∞–Ω–¥...');
        
        const appId = client.application.id;
        
        await rest.put(
            Routes.applicationCommands(appId),
            { body: [] }
        );
        
        console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ...');
        
        await rest.put(
            Routes.applicationCommands(appId),
            { body: commands }
        );
        
        console.log('Slash-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    }
}

function loadLastCheckedData() {
    try {
        if (fs.existsSync(config.dataFile)) {
            const data = fs.readFileSync(config.dataFile, 'utf8');
            lastCheckedData = JSON.parse(data);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', lastCheckedData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    }
}

function saveLastCheckedData() {
    try {
        fs.writeFileSync(config.dataFile, JSON.stringify(lastCheckedData), 'utf8');
        console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    }
}

async function fetchReviews() {
    let browser = null;
    try {
        console.log('–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
        

        console.log(`–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ API: ${config.forumUrl}.json`);
        
        const urlParts = config.forumUrl.split('/');
        const topicId = urlParts[urlParts.length - 1];
        const jsonUrl = `${config.forumUrl}.json`;
        
        await page.goto(jsonUrl, { waitUntil: 'networkidle2' });
        
        const topicData = await page.evaluate(() => {
            return JSON.parse(document.body.textContent);
        });
        
        const totalPosts = topicData.posts_count || 0;
        console.log(`–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–º–µ: ${totalPosts}`);
        
        if (totalPosts === 0) {
            return [];
        }
        
        const postsPerPage = 20;
        const desiredPosts = 30;
        
        const lastPage = Math.ceil(totalPosts / postsPerPage);
        
        const pageUrl = `${config.forumUrl}?page=${lastPage}`;
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${pageUrl}`);
        
        await page.goto(pageUrl, { waitUntil: 'networkidle2' });
        await page.waitForSelector('.topic-post');
        
        const reviews = await page.evaluate((forumUrl) => {
            const postElements = document.querySelectorAll('.topic-post');
            return Array.from(postElements).map(post => {
                const usernameElement = post.querySelector('.username a');
                const timeElement = post.querySelector('.relative-date');
                const contentElement = post.querySelector('.cooked');
                const postIdAttr = post.getAttribute('data-post-id');
                const postNumber = post.getAttribute('data-post-number') || '';
                
                return {
                    postId: postIdAttr || '',
                    postNumber: postNumber,
                    username: usernameElement ? usernameElement.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    timeAgo: timeElement ? timeElement.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    content: contentElement ? contentElement.textContent.trim() : '–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤',
                    postUrl: `${forumUrl}/${postNumber}`
                };
            });
        }, config.forumUrl);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
        return reviews;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        return [];
    } finally {
        if (browser) {
            await browser.close();
            console.log('–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

async function sendNewReviews(reviews) {
    if (!reviews || reviews.length === 0) {
        console.log('–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        return 0;
    }

    const channel = client.channels.cache.get(config.channelId);
    if (!channel) {
        console.error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', config.channelId);
        return 0;
    }

    const newReviews = reviews.filter(review => {
        return parseInt(review.postId, 10) > lastCheckedData.lastPostId;
    });

    if (newReviews.length === 0) {
        console.log('–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return 0;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${newReviews.length} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤`);

    for (const review of newReviews) {
        const embed = new EmbedBuilder()
            .setColor('#0b1622') 
            .setAuthor({
                name: `${review.username}`,
                iconURL: 'https://forum.neverlose.cc/user_avatar/forum.neverlose.cc/' + review.username.toLowerCase() + '/70/1.png'
            })
            .setDescription(review.content)
            .setFooter({ text: `üëç ${review.likeCount || '0'}` })
            .setTimestamp(review.dateISO ? new Date(parseInt(review.dateISO)) : null);

        await channel.send({ embeds: [embed] });
        
        lastCheckedData.lastPostId = parseInt(review.postId, 10);
        lastCheckedData.lastPostNumber = parseInt(review.postNumber, 10);
    }

    saveLastCheckedData();
    
    return newReviews.length;
}

async function checkForNewReviews() {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...');
    try {
        const reviews = await fetchReviews();
        return await sendNewReviews(reviews);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:', error);
        return 0;
    }
}


async function getLastReview() {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞...');
        const reviews = await fetchReviews();
        
        if (!reviews || reviews.length === 0) {
            console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤');
            return null;
        }
        
                reviews.forEach((review, index) => {
            console.log(`–û—Ç–∑—ã–≤ #${index}: –æ—Ç ${review.username}, timeAgo=${review.timeAgo}, postNumber=${review.postNumber}`);
        });
        
        function timeAgoToMinutes(timeAgo) {
            if (!timeAgo) return Number.MAX_SAFE_INTEGER;
            
            const match = timeAgo.match(/(\d+)(\w+)/);
            if (!match) return Number.MAX_SAFE_INTEGER;
            
            const value = parseInt(match[1], 10);
            const unit = match[2];
            
            if (unit.includes('h')) return value * 60;                     if (unit.includes('m')) return value;                          if (unit.includes('d')) return value * 60 * 24;                
            return Number.MAX_SAFE_INTEGER;
        }
        
        const sortedReviews = [...reviews].sort((a, b) => {
            return timeAgoToMinutes(a.timeAgo) - timeAgoToMinutes(b.timeAgo);
        });
        
        if (sortedReviews.length > 0) {
            const newestReview = sortedReviews[0];
            console.log(`–ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –æ—Ç ${newestReview.username} (${newestReview.timeAgo})`);
            return newestReview;
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞:', error);
        return null;
    }
}

async function sendLastReviewEmbed(interaction) {
    await interaction.deferReply();
    
    const lastReview = await getLastReview();
    
    if (!lastReview) {
        await interaction.editReply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ä—É–º–∞.');
        return;
    }
    
    const embed = new EmbedBuilder()
        .setColor('#0b1622') 
        .setAuthor({
            name: `${lastReview.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`,
            iconURL: 'https://forum.neverlose.cc/user_avatar/forum.neverlose.cc/' + (lastReview.username || 'unknown').toLowerCase() + '/70/1.png'
        })
        .setDescription(lastReview.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        .setFooter({ text: `üëç ${lastReview.likeCount || '0'}` })
        .setTimestamp(lastReview.dateISO ? new Date(parseInt(lastReview.dateISO)) : null);
    
    await interaction.editReply({ embeds: [embed] });
}

async function handleCheckCommand(interaction) {
    const embed = new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ')
        .setDescription('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ Neverlose.cc')
        .setTimestamp();
    
    const checkButton = new ButtonBuilder()
        .setCustomId('check_reviews')
        .setLabel('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üîç');
    
    const lastReviewButton = new ButtonBuilder()
        .setCustomId('last_review')
        .setLabel('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìù');
    
    const row = new ActionRowBuilder().addComponents(checkButton, lastReviewButton);
    
    await interaction.reply({ embeds: [embed], components: [row] });
}

async function handleLastReviewButton(interaction) {
    await sendLastReviewEmbed(interaction);
}

async function handleCheckButton(interaction) {
    await interaction.deferReply({ ephemeral: true });
    
    try {
        const count = await checkForNewReviews();
        
        if (count === 0) {
            await interaction.editReply({ content: '–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
        } else {
            await interaction.editReply({ 
                content: `–ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${count} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.`, 
                ephemeral: true 
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        await interaction.editReply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞.', 
            ephemeral: true 
        });
    }
}

async function getReviewByPostNumber(topicId, postNumber) {
    let browser;
    try {
        console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–æ–º–µ—Ä–æ–º: ${postNumber} –≤ —Ç–µ–º–µ ${topicId}`);
        
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
        
        const directUrl = `https://forum.neverlose.cc/t/24-7-unique-resell-ua-ru-kz-ua-cards-ru-cards-kz-cards-binance-pay-bybit-uid-htx-id/${topicId}/${postNumber}`;
        console.log(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ${directUrl}`);
        
        await page.goto(directUrl, { waitUntil: 'networkidle2', timeout: 60000 });
        
        await page.screenshot({ path: `comment-${postNumber}.png` });
        
        const review = await page.evaluate((targetNumber) => {
            const postSelector = `#post_${targetNumber}`;
            const post = document.querySelector(postSelector);
            
            if (!post) {
                console.log(`–ü–æ—Å—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${postSelector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return null;
            }
            
            const username = post.querySelector('.username a')?.textContent.trim() || '';
            const timeAgo = post.querySelector('.relative-date')?.textContent.trim() || '';
            const content = post.querySelector('.cooked')?.textContent.trim() || '';
            let avatar = post.querySelector('.avatar')?.getAttribute('src') || '';
            
            if (avatar && avatar.startsWith('/')) {
                avatar = 'https://forum.neverlose.cc' + avatar;
            }
            
            return {
                postNumber: targetNumber,
                username,
                timeAgo,
                content,
                avatar
            };
        }, postNumber);
        
        if (review) {
            console.log(`–ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${review.username}: ${review.content.substring(0, 50)}...`);
            return review;
        } else {
            console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–º–µ—Ä–æ–º ${postNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        return null;
    } finally {
        if (browser) await browser.close();
    }
}

function extractPostInfoFromUrl(url) {
    try {
                        const regex = /\/t\/.*?\/(\d+)\/(\d+)(?:\?|$)/;
        const match = url.match(regex);
        
        if (match && match.length >= 3) {
            return {
                topicId: match[1],
                postNumber: match[2]
            };
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ URL:', error);
        return null;
    }
}


const reviewsCacheFile = './reviewsCache.json';

async function loadReviewsCache() {
    try {
        if (fs.existsSync(reviewsCacheFile)) {
            const data = fs.readFileSync(reviewsCacheFile, 'utf8');
            return JSON.parse(data) || [];
        }
        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        return [];
    }
}

async function saveReviewsCache(cache) {
    try {
        fs.writeFileSync(reviewsCacheFile, JSON.stringify(cache, null, 2), 'utf8');
        console.log(`–ö—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, –≤—Å–µ–≥–æ ${cache.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    }
}

async function findReviewInCache(postNumber) {
    const cache = await loadReviewsCache();
    return cache.find(review => review.postNumber === postNumber);
}

async function addReviewToCache(review) {
    const cache = await loadReviewsCache();
        const existingIndex = cache.findIndex(r => r.postNumber === review.postNumber);
    
    if (existingIndex >= 0) {
                cache[existingIndex] = review;
    } else {
        cache.push(review);
    }
    
    await saveReviewsCache(cache);
}

async function getTotalTopicPagesOptimized() {
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const page = await browser.newPage();
        
        await page.setRequestInterception(true);
        page.on('request', (req) => {
            const resourceType = req.resourceType();
            if (resourceType === 'image' || resourceType === 'font' || resourceType === 'stylesheet') {
                req.abort();
            } else {
                req.continue();
            }
        });
        
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
        
        const jsonUrl = `${config.forumUrl}.json`;
        console.log(`–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: ${jsonUrl}`);
        
        await page.goto(jsonUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        
        const topicInfo = await page.evaluate(() => {
            return JSON.parse(document.body.textContent);
        });
        
        const postsCount = topicInfo.posts_count || 0;
        const postsPerPage = 20;
        const totalPages = Math.ceil(postsCount / postsPerPage);
        
        console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: ${postsCount}, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);
        
        return { totalPages, postsCount };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ:', error);
        return { totalPages: 0, postsCount: 0 };
    } finally {
        if (browser) await browser.close();
    }
}

async function fetchPageReviewsOptimized(pageNumber, browser) {
    try {
        const page = await browser.newPage();
        
                await page.setRequestInterception(true);
        page.on('request', (req) => {
            const resourceType = req.resourceType();
            if (resourceType === 'image' || resourceType === 'font' || resourceType === 'stylesheet') {
                req.abort();
            } else {
                req.continue();
            }
        });
        
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
        
        const pageUrl = `${config.forumUrl}?page=${pageNumber}`;
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNumber}: ${pageUrl}`);
        
        await page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        await page.waitForSelector('.topic-post', { timeout: 30000 })
            .catch(err => console.log(`–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber}: ${err.message}`));
        
        const reviews = await page.evaluate((forumUrl) => {
            const postElements = document.querySelectorAll('.topic-post');
            return Array.from(postElements).map(post => {
                const postNumber = post.getAttribute('data-post-number') || '';
                const usernameElement = post.querySelector('.username a');
                const username = usernameElement ? usernameElement.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                const timeElement = post.querySelector('.relative-date');
                const timeAgo = timeElement ? timeElement.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const contentElement = post.querySelector('.cooked');
                const content = contentElement ? contentElement.textContent.trim() : '–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤';
                
                return {
                    postNumber,
                    username,
                    timeAgo,
                    content,
                    postUrl: `${forumUrl}/${postNumber}`
                };
            });
        }, config.forumUrl);
        
        await page.close();
        console.log(`–°–æ–±—Ä–∞–Ω–æ ${reviews.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}`);
        return reviews;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}:`, error);
        return [];
    }
}


async function handleCollectCommand(interaction) {
    await interaction.deferReply({ ephemeral: true });
    
    let browser;
    let progressMessage = await interaction.editReply('–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    
    try {
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const { totalPages, postsCount } = await getTotalTopicPagesOptimized();
        
        if (totalPages === 0) {
            await interaction.editReply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ç–µ–º–µ.');
            return;
        }
        
        let cachedReviews = await loadReviewsCache();
        const cachedCount = cachedReviews.length;
        
        await interaction.editReply(`–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${postsCount}. –í –∫—ç—à–µ: ${cachedCount}. –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä...`);
        
        const cachedPostNumbers = new Set(cachedReviews.map(r => r.postNumber));
        
        let newReviews = [];
        
        const batchSize = 3;
        const estimatedTimePerPage = 5;
        
        for (let startPage = 1; startPage <= totalPages; startPage += batchSize) {
            const endPage = Math.min(startPage + batchSize - 1, totalPages);
            const pagesInBatch = endPage - startPage + 1;
            
            const progressPercent = Math.round((startPage / totalPages) * 100);
            const estimatedTimeRemaining = Math.round(((totalPages - startPage + 1) / batchSize) * estimatedTimePerPage * batchSize);
            
            await interaction.editReply(
                `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent}% (—Å—Ç—Ä–∞–Ω–∏—Ü—ã ${startPage}-${endPage} –∏–∑ ${totalPages})\n` +
                `–°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${newReviews.length}\n` +
                `–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: ${estimatedTimeRemaining} —Å–µ–∫—É–Ω–¥`
            );
            
            const pagePromises = [];
            for (let page = startPage; page <= endPage; page++) {
                pagePromises.push(fetchPageReviewsOptimized(page, browser));
            }
            
            const pageResults = await Promise.all(pagePromises);
            
            for (const reviews of pageResults) {
                for (const review of reviews) {
                    if (!cachedPostNumbers.has(review.postNumber)) {
                        newReviews.push(review);
                        cachedPostNumbers.add(review.postNumber);
                    }
                }
            }
            
            if (newReviews.length > 0 && (newReviews.length % 100 === 0 || endPage === totalPages)) {
                const combinedReviews = [...cachedReviews, ...newReviews];
                await saveReviewsCache(combinedReviews);
                cachedReviews = combinedReviews;
                newReviews = [];
                
                await interaction.editReply(
                    `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent}% (—Å—Ç—Ä–∞–Ω–∏—Ü—ã ${startPage}-${endPage} –∏–∑ ${totalPages})\n` +
                    `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: ${cachedReviews.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n` +
                    `–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: ${estimatedTimeRemaining} —Å–µ–∫—É–Ω–¥`
                );
            }
        }
        
        const finalCount = cachedReviews.length;
        const newCount = finalCount - cachedCount;
        
        await interaction.editReply(
            `‚úÖ –°–±–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n` +
            `–í—Å–µ–≥–æ –≤ –∫—ç—à–µ: ${finalCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n` +
            `–ù–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${newCount}\n` +
            `–í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${reviewsCacheFile}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        await interaction.editReply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } finally {
        if (browser) await browser.close();
    }
}

async function verifyReview(interaction) {
    await interaction.deferReply({ ephemeral: true });
    
    const url = interaction.options.getString('url');
    const claimedUsername = interaction.options.getString('username').toLowerCase();
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞: URL=${url}, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${claimedUsername}`);
    
    const postInfo = extractPostInfoFromUrl(url);
    if (!postInfo) {
        await interaction.editReply({ 
            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://forum.neverlose.cc/t/topic-name/519874/2214).',
            ephemeral: true 
        });
        return;
    }
    
    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: topicId=${postInfo.topicId}, postNumber=${postInfo.postNumber}`);
    
    const review = await getReviewByPostNumber(postInfo.topicId, postInfo.postNumber);
    if (!review) {
        await interaction.editReply({ 
            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞.',
            ephemeral: true 
        });
        return;
    }
    
    const actualUsername = review.username.toLowerCase();
    const isVerified = actualUsername === claimedUsername;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${actualUsername}, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π=${claimedUsername}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=${isVerified}`);
    
    const embed = new EmbedBuilder()
        .setColor(isVerified ? '#00b74a' : '#f93154')
        .setTitle(isVerified ? '‚úÖ –û—Ç–∑—ã–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ùå –û—Ç–∑—ã–≤ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
        .setDescription(isVerified 
            ? `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —á—Ç–æ –æ—Ç–∑—ã–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **${review.username}**`
            : `–û—Ç–∑—ã–≤ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **${review.username}**, –∞ –Ω–µ **${claimedUsername}**`)
        .addFields(
            { name: '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞', value: `#${review.postNumber}` },
            { name: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', value: review.content.substring(0, 1024) || '–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤' },
            { name: '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', value: review.timeAgo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }
        )
        .setTimestamp();
    
    if (review.avatar) {
        embed.setThumbnail(review.avatar);
    }
    
    await interaction.editReply({ embeds: [embed], ephemeral: true });
    
    if (isVerified) {
        const channel = interaction.channel;
        const publicEmbed = new EmbedBuilder()
            .setColor('#00b74a')
            .setTitle('‚úÖ –û—Ç–∑—ã–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
            .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.toString()} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ–π –æ—Ç–∑—ã–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ Neverlose.cc`)
            .addFields(
                { name: '–ò–º—è –Ω–∞ —Ñ–æ—Ä—É–º–µ', value: review.username },
                { name: '–ù–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞', value: `#${review.postNumber}` },
                { name: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', value: review.content.substring(0, 1024) || '–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤' },
                { name: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', value: review.timeAgo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }
            )
            .setTimestamp();
        
        if (review.avatar) {
            if (review.avatar.startsWith('/')) {
                review.avatar = 'https://forum.neverlose.cc' + review.avatar;
            }
            if (review.avatar.startsWith('http://') || review.avatar.startsWith('https://')) {
                publicEmbed.setThumbnail(review.avatar);
            }
        }
        
        await channel.send({ embeds: [publicEmbed] });
    }
}

function createCommentCheckModal() {
    const modal = new ModalBuilder()
        .setCustomId('verify-comment-modal')
        .setTitle('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    
    const urlInput = new TextInputBuilder()
        .setCustomId('commentUrl')
        .setLabel('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        .setPlaceholder('https://forum.neverlose.cc/t/topic/519874/2214')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);
    
    const usernameInput = new TextInputBuilder()
        .setCustomId('commentUsername')
        .setLabel('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–æ—Ä—É–º–µ')
        .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–æ—Ä—É–º–µ')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);
    
    const firstActionRow = new ActionRowBuilder().addComponents(urlInput);
    const secondActionRow = new ActionRowBuilder().addComponents(usernameInput);
    
    modal.addComponents(firstActionRow, secondActionRow);
    
    return modal;
}

function createCommentCheckButton() {
    const button = new ButtonBuilder()
        .setCustomId('check_comment')
        .setLabel('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üîç');
    
    return button;
}

async function handleCheckCommentCommand(interaction) {
    try {
        const modal = createCommentCheckModal();
        await interaction.showModal(modal);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        await interaction.reply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            ephemeral: true 
        });
    }
}

async function handleCheckCommentButton(interaction) {
    try {
        const modal = createCommentCheckModal();
        await interaction.showModal(modal);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        await interaction.reply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            ephemeral: true 
        });
    }
}

async function handleModalSubmit(interaction) {
    try {
        if (interaction.customId !== 'verify-comment-modal') return;
        if (interaction.customId !== 'verify-comment-modal') return;
        
        await interaction.deferReply({ ephemeral: true });
        
        const url = interaction.fields.getTextInputValue('commentUrl');
        const claimedUsername = interaction.fields.getTextInputValue('commentUsername').toLowerCase();
        
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: URL=${url}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${claimedUsername}`);
        
        const postInfo = extractPostInfoFromUrl(url);
        if (!postInfo) {
            await interaction.editReply({ 
                content: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://forum.neverlose.cc/t/topic-name/519874/2214).',
                ephemeral: true 
            });
            return;
        }
        
        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: topicId=${postInfo.topicId}, postNumber=${postInfo.postNumber}`);
        
        const review = await getReviewByPostNumber(postInfo.topicId, postInfo.postNumber);
        if (!review) {
            await interaction.editReply({ 
                content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞.',
                ephemeral: true 
            });
            return;
        }
        
        const actualUsername = review.username.toLowerCase();
        const isVerified = actualUsername === claimedUsername;
        
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${actualUsername}, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π=${claimedUsername}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=${isVerified}`);
        
        const embed = new EmbedBuilder()
            .setColor(isVerified ? '#00b74a' : '#f93154')              .setTitle(isVerified ? '‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
            .setDescription(isVerified 
                ? `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **${review.username}**`
                : `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **${review.username}**, –∞ –Ω–µ **${claimedUsername}**`)
            .addFields(
                { name: '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞', value: `#${review.postNumber}` },
                { name: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', value: review.content.substring(0, 1024) || '–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' },
                { name: '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', value: review.timeAgo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }
            )
            .setTimestamp();
        

        if (review.avatar) {
            if (review.avatar.startsWith('/')) {
                review.avatar = 'https://forum.neverlose.cc' + review.avatar;
            }
            if (review.avatar.startsWith('http://') || review.avatar.startsWith('https://')) {
                embed.setThumbnail(review.avatar);
            }
        }
        
        await interaction.editReply({ embeds: [embed], ephemeral: true });
        
        if (isVerified) {
            const channel = interaction.channel;
            const publicEmbed = new EmbedBuilder()
                .setColor('#00b74a')
                .setTitle('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.toString()} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ñ–æ—Ä—É–º–µ Neverlose.cc`)
                .addFields(
                    { name: '–ò–º—è –Ω–∞ —Ñ–æ—Ä—É–º–µ', value: review.username },
                    { name: '–ù–æ–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', value: `#${review.postNumber}` },
                    { name: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', value: review.content.substring(0, 1024) || '–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' },
                    { name: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', value: review.timeAgo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }
                )
                .setTimestamp();
            
            if (review.avatar) {
                if (review.avatar.startsWith('/')) {
                    review.avatar = 'https://forum.neverlose.cc' + review.avatar;
                }
                if (review.avatar.startsWith('http://') || review.avatar.startsWith('https://')) {
                    publicEmbed.setThumbnail(review.avatar);
                }
            }
            
            await channel.send({ embeds: [publicEmbed] });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        
        if (interaction.deferred || interaction.replied) {
            await interaction.editReply({ 
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true 
            });
        } else {
            await interaction.reply({ 
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral: true 
            });
        }
    }
}

async function sendCheckCommentButton(interaction) {
    const row = new ActionRowBuilder().addComponents(createCommentCheckButton());
    
    await interaction.reply({
        content: '**–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ñ–æ—Ä—É–º–∞ Neverlose.cc**\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:',
        components: [row]
    });
}

client.on('interactionCreate', async interaction => {
    if (interaction.isChatInputCommand()) {
        if (interaction.commandName === 'check') {
            await handleCheckCommand(interaction);
        } 
        else if (interaction.commandName === 'lastreview') {
            await sendLastReviewEmbed(interaction);
        }
        else if (interaction.commandName === 'verify') {
            await verifyReview(interaction);
        }
        else if (interaction.commandName === 'checkcomment') {
            await handleCheckCommentCommand(interaction);
        }
        else if (interaction.commandName === 'collect') {
            await handleCollectCommand(interaction);
        }
    }
    
    if (interaction.isButton()) {
        if (interaction.customId === 'check_reviews') {
            await handleCheckButton(interaction);
        } 
        else if (interaction.customId === 'last_review') {
            await handleLastReviewButton(interaction);
        }
        else if (interaction.customId === 'check_comment') {
            await handleCheckCommentButton(interaction);
        }
    }
    
    if (interaction.isModalSubmit()) {
        await handleModalSubmit(interaction);
    }
});

client.once('ready', async () => {
    console.log(`–ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
    await registerCommands();
    loadLastCheckedData();
    checkForNewReviews();
    setInterval(checkForNewReviews, config.checkInterval);
});
client.on('messageCreate', async message => {
    if (message.content === '!update-commands' && message.author.id === `839523044682104902`) {
        await message.reply('–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ slash-–∫–æ–º–∞–Ω–¥...');
        await registerCommands();
        await message.reply('Slash-–∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.');
    }
});
client.login(config.discordToken); 